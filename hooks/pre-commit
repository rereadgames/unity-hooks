#!/bin/bash
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# Redirect output to stderr.
exec 1>&2

git diff --cached --name-only --diff-filter=A -z $against -- Assets | while read -d $'\0' f; do
	ext="${f##*.}"
	base="${f%.*}"

	if [ "$ext" = "meta" ]; then
		if [ $(git ls-files --cached -- "$base" | wc -l) = 0 ]; then
			cat <<EOF
Error: Redudant meta file.

Meta file \`$f' has been added, but \`$base' has not.

Please add \`$base' to git as well, or remove \`$f'.
EOF
			exit 1
		fi
	else
		p="$f"
		while [ "$p" != "Assets" ]; do
			if [ $(git ls-files --cached -- "$p.meta" | wc -l) = 0 ]; then
				cat <<EOF
Error: Missing meta file.

Asset \`$f' has been added, but \`$p.meta' has not.

Please add \`$p.meta'.
EOF
				exit 1
			fi
			p="${p%/*}"
		done
	fi
done

ret="$?"
if [ "$ret" != 0 ]; then
	exit "$ret"
fi

git diff --cached --name-only --diff-filter=D -z $against -- Assets | while read -d $'\0' f; do
	ext="${f##*.}"
	base="${f%.*}"

	if [ "$ext" = "meta" ]; then
		if [ $(git ls-files --cached -- "$base" | wc -l) != 0 ]; then
			cat <<EOF
Error: Redudant meta file.

Asset \`$f' is missing, but \`$p.meta' is still there.

Please remove \`$p.meta'.
EOF
			exit 1
		fi
	else
		p="$f"
		while [ "$p" != "Assets" ]; do
			if [ $(git ls-files --cached -- "$p" | wc -l) = 0 ] && [ $(git ls-files --cached -- "$p.meta" | wc -l) != 0 ]; then
				cat <<EOF
Error: Missing meta file.

Meta file \`$f' is missing, but \`$base' is still there.

Please remove \`$base' or restore the meta file (don't let Unity generate a new one, this will cause problems!).
EOF
				exit 1
			fi
			p="${p%/*}"
		done
	fi
done

# Check the project version hasn't changed while we are ignoring it.
projectVersions=$(git ls-files | grep "ProjectSettings/ProjectVersion.txt$");
while read projectVersion; do
  ignored=$(git ls-files -v | grep "^[[:lower:]] $projectVersion$");

  if [ ! -z "$ignored" ]
  then
    git update-index --no-assume-unchanged "$projectVersion";
	fi

  versionChange=$(git diff $projectVersion);
  repoVersion=$(echo "$versionChange" | grep '^-m_EditorVersion: ' | cut -d ' ' -f2);
  localVersion=$(echo "$versionChange" | grep '^+m_EditorVersion: ' | cut -d ' ' -f2);
  localVersionNormalized=$(echo $localVersion | sed s/x// | sed s/Linux//);

  if [ "$repoVersion" != "$localVersionNormalized" ]
  then
    echo "Your local version ('$localVersion') looks like a different version than the one in the repository ('$repoVersion'), but you are ignoring the change!";
    echo "This is dangerous. You want to commit it if the project has been updated. If you were ignoring it, I've unignored it for now.";
    echo "This might just be the platform version being different - if so, that's fine, update the hook to allow the variation through.";
    exit 1;
  fi

	if [ ! -z "$ignored" ]
  then
    git update-index --assume-unchanged "$projectVersion";
	fi

  versionChange=$(git diff --cached -z $against -- $projectVersion);
  if [ ! -z "$(echo "$versionChange" | grep "Linux")" ]
  then
    repoVersion=$(echo "$versionChange" | grep '^-m_EditorVersion: ' | cut -d ' ' -f2);
    localVersion=$(echo "$versionChange" | grep '^+m_EditorVersion: ' | cut -d ' ' -f2);
    localVersionNormalized=$(echo $localVersion | sed s/x// | sed s/Linux//);
    echo "You are trying to commit a new version ('$localVersion' as compared to the previously committed '$repoVersion') that is platform-specific.";
    if [ "$repoVersion" != "$localVersionNormalized" ]
    then
      echo "It looks like the project has actually been updated, so we'll let this through.";
    else
      echo "It looks like the project is the same version, just on a different platform. Check that this is the case - if it isn't you must update the hook to allow the variation and commit this change."
      echo "You should remove the file from the commit ('git reset \"$projectVersion\"').";
			echo "You can also ignore changes to the file in future with 'git update-index --assume-unchanged \"$projectVersion\"' - make sure you commit it if you actually update the project though."
      exit 1;
    fi
  fi
done <<< "$projectVersions"

ret="$?"
if [ "$ret" != 0 ]; then
	exit "$ret"
fi
